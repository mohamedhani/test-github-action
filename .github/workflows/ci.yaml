name: Continous Integration Wotkflow
on:
  push:
    branches:
    - 'master'
    - 'feature/**'
  pull_request:
    branches:
    - 'master'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref	 }}
  cancel-in-progress: true
jobs:
  unit-testing:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4 
    - uses: actions/setup-go@v5
      with:
        go-version: '1.22.2'
        cache-dependency-path: ${{ runner.os }}-golang-${{ hashFiles('**/go.sum') }}
    - name: Install Dependancies
      run : go mod download
    - name: Unit Test
      run: go test ./...
  linting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4 
    - uses: actions/setup-go@v5
      with:
        go-version: '1.22.2'
        cache-dependency-path: ${{ runner.os }}-golang-${{ hashFiles('**/go.sum') }}
    - name: Install Dependancies
      run : go mod download
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v5
      with:
        version: latest
  get-env-tag:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4 
      with:
        fetch-tags: true
        fetch-depth: 0
    - name: Get Image Tag
      id: env-tag
      run : |
        LATEST_TAG=$( git tag --list | tail -1 )
        LATEST_TAG_COMMIT=$(git rev-list -n 1 tags/$LATEST_TAG)
        CREATE_NEW_TAG=false
        echo '${{ github.event }}'
        if [[ ${{ github.ref_name }} != "master"  ]]
        then 
          NEW_TAG=$LATEST_TAG-snapshot
        elif [[ ${{ github.ref_name }} == "master" && ${{ github.sha }} == $LATEST_TAG_COMMIT ]]
        then 
          NEW_TAG=$LATEST_TAG
        else
          NEW_TAG=$(echo $LATEST_TAG   | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}')
          CREATE_NEW_TAG=true
        fi
        echo "IMAGE_TAG=$NEW_TAG" >> "$GITHUB_OUTPUT"
        echo "CREATE_NEW_TAG=$CREATE_NEW_TAG" >> "$GITHUB_OUTPUT"
    outputs:
      image-tag: ${{ steps.env-tag.outputs.IMAGE_TAG }}
      create-new-tag:  ${{ steps.env-tag.outputs.CREATE_NEW_TAG }}
  build-only:
    if: ${{  github.event_name	 == 'push' &&  startsWith(github.ref_name	 ,'feature/') }}
    uses: ./.github/workflows/dockerization.yaml
    secrets: inherit
    needs:
    - linting
    -  unit-testing
    - get-env-tag
    with:
      push: false
      tag: ${{ needs.get-env-tag.outputs.image-tag }}
      image-name: test-github-action
  build-and-push:
    if: ${{ ( github.event_name	 == 'push' &&  github.ref_name	 == 'master') || github.event_name	 == 'pull_request'   }}
    uses: ./.github/workflows/dockerization.yaml
    secrets: inherit
    needs:
    - linting
    -  unit-testing
    - get-env-tag
    with:
      push: true
      tag: ${{ needs.get-env-tag.outputs.image-tag }}
      image-name: test-github-action
  release-tag:
    runs-on: ubuntu-latest
    if: ${{ needs.get-env-tag.outputs.create-new-tag == 'true' }}
    permissions:
      contents: write
    needs:
    - get-env-tag
    - build-and-push
    steps:
    - uses: actions/checkout@v4 
      with:
        fetch-tags: true
        fetch-depth: 0
    - run: |
        git tag ${{ needs.get-env-tag.outputs.image-tag }}
        git push --tags
